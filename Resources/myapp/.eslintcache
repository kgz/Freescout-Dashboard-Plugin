[{"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\main.tsx":"1","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\@stores\\MyStore.tsx":"2","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\pages\\Container.tsx":"3","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\@types\\storeState.ts":"4","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\Header.tsx":"5","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\Dashboard.tsx":"6","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\pages\\Index.tsx":"7","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\Grid.tsx":"8","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\modules.tsx":"9","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\responseTimes.tsx":"10","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\lastClosures.tsx":"11","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\responseTimesOverTime.tsx":"12","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\openTicketsBreakdown.tsx":"13","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\pendingTicketsBreakdown.tsx":"14","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\openTicketOverview.tsx":"15"},{"size":341,"mtime":1695636407104,"results":"16","hashOfConfig":"17"},{"size":3271,"mtime":1695636407096,"results":"18","hashOfConfig":"17"},{"size":521,"mtime":1695636689834,"results":"19","hashOfConfig":"17"},{"size":614,"mtime":1695636407101,"results":"20","hashOfConfig":"17"},{"size":2821,"mtime":1695636667536,"results":"21","hashOfConfig":"17"},{"size":8970,"mtime":1695636407103,"results":"22","hashOfConfig":"17"},{"size":13574,"mtime":1695642519929,"results":"23","hashOfConfig":"17"},{"size":1419,"mtime":1695639494978,"results":"24","hashOfConfig":"17"},{"size":2542,"mtime":1695642940072,"results":"25","hashOfConfig":"17"},{"size":5479,"mtime":1695636407106,"results":"26","hashOfConfig":"17"},{"size":4171,"mtime":1695636407104,"results":"27","hashOfConfig":"17"},{"size":4757,"mtime":1695636407106,"results":"28","hashOfConfig":"17"},{"size":11004,"mtime":1695643008909,"results":"29","hashOfConfig":"17"},{"size":10318,"mtime":1695643372177,"results":"30","hashOfConfig":"17"},{"size":8269,"mtime":1695636407104,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"ea8kec",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\main.tsx",[],[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\@stores\\MyStore.tsx",["83"],[],"import { configureStore, createSlice } from '@reduxjs/toolkit'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport type { TypedUseSelectorHook } from 'react-redux'\r\nimport thunk from \"redux-thunk\";\r\nimport { StoreState, newStoreState } from '../@types/storeState'\r\nimport { ISelectedDates } from '../@types/stores';\r\nimport dayjs from 'dayjs';\r\nimport { IDataEntity } from '../@types/response_times';\r\nimport { IOpenTickets } from '../@types/open_tickets';\r\nimport { IClosedTickets } from 'src/@types/closed_tickets';\r\nimport { Tmodule } from '../@types/module';\r\n\r\nexport const state: StoreState = {\r\n\tselectedDates: newStoreState<ISelectedDates>(0, {\r\n        startDate: dayjs().startOf(\"month\").unix(),\r\n        endDate:  dayjs().endOf(\"month\").unix()\r\n    }),\r\n    responseTimes: newStoreState<IDataEntity[]>(0, []),\r\n    openTickets: newStoreState<IOpenTickets[]>(0, []),\r\n    lastClosedTickets: newStoreState<IClosedTickets[]>(0, []),\r\n    selectedModules: newStoreState<Tmodule[]>(0, []),\r\n}\r\n\r\nconst UserStore = createSlice({\r\n\tname: 'store',\r\n\tinitialState: state,\r\n\treducers: {\r\n\t\tsetSelectedDates: (state, data) => {\r\n            state.selectedDates.data.startDate = data.payload.startDate\r\n            state.selectedDates.data.endDate = data.payload.endDate\r\n        },\r\n        setResponseTimes: (state, data) => {\r\n            state.responseTimes.data = [...data.payload, ...state.responseTimes.data]\r\n        },\r\n        resetResponseTimes: (state) => {\r\n            state.responseTimes.data = []\r\n        },\r\n        setResponseTimesLoading: (state, data) => {\r\n            state.responseTimes.loading = data.payload\r\n        },\r\n        setOpenTickets: (state, data) => {\r\n            state.openTickets.data = [...data.payload, ...state.openTickets.data]\r\n        },\r\n        resetOpenTickets: (state) => {\r\n            state.openTickets.data = []\r\n        },\r\n        setOpenTicketsLoading: (state, data) => {\r\n            state.openTickets.loading = data.payload\r\n        },\r\n        setClosedTickets: (state, data) => {\r\n            state.lastClosedTickets.data = data.payload\r\n        },\r\n        setClosedTicketsLoading: (state, data) => {\r\n            state.lastClosedTickets.loading = data.payload\r\n        },\r\n\r\n\r\n\t}\r\n});\r\n\r\n// export const { incremented, decremented } = UserStore.actions\r\nexport const { \r\n    setSelectedDates,\r\n    resetResponseTimes,\r\n    setResponseTimes,\r\n    setResponseTimesLoading,\r\n    setOpenTickets,\r\n    resetOpenTickets,\r\n    setOpenTicketsLoading,\r\n    setClosedTickets,\r\n    setClosedTicketsLoading,\r\n} = UserStore.actions;\r\n\r\nconst store = configureStore({\r\n\treducer: UserStore.reducer,\r\n\tmiddleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\r\n})\r\n\r\n// watch for changes in selectedUsers\r\nstore.subscribe(() => {\r\n    // const selectedUsers = store.getState().selectedUsers.data\r\n    // localStorage.setItem(\"selectedUsers\", JSON.stringify(selectedUsers))\r\n\r\n})\r\n\r\n// export type RootState = ReturnType<typeof store.getState>\r\nexport type RootState = typeof state\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\n\r\nexport default store\r\n","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\pages\\Container.tsx",["84"],[],"import { BrowserRouter, Route, Routes } from 'react-router-dom'\r\n\r\nimport Header from '../compoments/Header'\r\nimport Dashboard from '../compoments/Dashboard'\r\nimport Index from './Index'\r\n\r\nconst Container = () => {\r\n    return (\r\n        <BrowserRouter basename='/responses'>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Dashboard/>}/>\r\n                <Route path=\"/dashboard/:dashboardId\" element={<Index/>}/>\r\n\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Container","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\@types\\storeState.ts",["85","86"],[],"export interface State<T> {\r\n    refreshTime?: number|false;\r\n        refreshIntervalSeconds: number|false;\r\n        loading: boolean;\r\n        data: T;\r\n}\r\nexport interface StoreState {\r\n    // @ts-ignore @typescript-eslint/no-explicit-any\r\n    // @eslint-ignore @typescript-eslint/no-explicit-any\r\n    [key: string]: State<any>;\r\n}\r\n\r\nexport const newStoreState = <T,>(setRefreshIntervalSeconds: number|false, defaultData: T): State<T> => {\r\n    return {\r\n        refreshTime: false,\r\n        refreshIntervalSeconds: setRefreshIntervalSeconds,\r\n        loading: false,\r\n        data: defaultData as T,\r\n    };\r\n}","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\Header.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\Dashboard.tsx",["87","88","89","90","91"],[],"import PlusOutlined from '@ant-design/icons/lib/icons/PlusOutlined';\r\nimport { containerClasses } from '@mui/material';\r\nimport { Button, Drawer, FloatButton, Form, Image, Input, Spin, Tag, Tooltip } from 'antd';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport style from '../@styles/dashboard.module.scss'\r\nimport { IDashboard, IDashboardRaw } from '../@types/dashboard';\r\n\r\nconst Dashboard = () => {\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [dashboardList, setDashboardList] = useState([])\r\n    const [needsUpdate, setNeedsUpdate] = useState(0)\r\n    const [pendingCreate, setPendingCreate] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        const abortController = new AbortController()\r\n        const signal = abortController.signal\r\n        fetch('http://freescout.example.com/responses/api/dashboards', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n            },\r\n            signal: signal,\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setDashboardList(data)\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            }).finally(() => {\r\n                setLoading(false)\r\n            })\r\n        return () => {\r\n            abortController.abort()\r\n        }\r\n    }, [needsUpdate])\r\n\r\n    const onFinish = (values: any) => {\r\n        setPendingCreate(true)\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n        fetch('http://freescout.example.com/responses/api/create_dashboard', {\r\n            method: 'POST',\r\n            signal: signal,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content') as string,\r\n            },\r\n            body: JSON.stringify(values)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setDrawerOpen(false)\r\n                setNeedsUpdate((ld) => ld + 1)\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setPendingCreate(false)\r\n            });\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    };\r\n\r\n    const DashboardData: IDashboard[] = useMemo(() => {\r\n        if (!dashboardList) return [];\r\n        // map through and json parse the modules\r\n        return dashboardList.map((element: IDashboardRaw) => {\r\n            return {\r\n                ...element,\r\n                elements: JSON.parse(element.elements ?? '[]')\r\n            }\r\n        })\r\n    }, [dashboardList])\r\n\r\n    const cahceTime = useMemo(() => {\r\n        return Date.now()\r\n    }, [needsUpdate])\r\n\r\n    return (\r\n        <>\r\n            <div className={style.main} style ={\r\n                loading ? {\r\n                    justifyContent:'center',\r\n                    alignItems:'center',\r\n                } : {}\r\n\r\n            }>\r\n                {/* <h1>Create Dashboard</h1>\r\n                <Button onClick={() => setDrawerOpen(true)}>Open</Button> */}\r\n\r\n                {loading && <Spin size=\"large\" />}\r\n                {!loading && DashboardData && DashboardData.map((element: IDashboard) => {\r\n                    return (\r\n                        <Tooltip key={element.id} title={()=>{\r\n                            return (\r\n                                <>\r\n                                    {/* <img style={{\r\n                                        height:'100%',\r\n                                        width:'100%',\r\n                                    }} src={'/img/dashboard_' + element.id + '.png'} alt={element.name} \r\n                                        onError={(e: any) => {\r\n                                            e.target.onerror = null;\r\n                                            // overide with an empty text\r\n                                            e.target.src = '/img/no-preview.png'\r\n                                        }}\r\n\r\n                                    \r\n                                    /> */}\r\n                                    <Image\r\n                                        src={'/img/dashboard_' + element.id + '.png?t=' + cahceTime}\r\n                                        fallback={'/img/no-preview.png'}\r\n                                        style={{\r\n                                            height:'100%',\r\n                                            width:'100%',\r\n                                        }}\r\n                                        preview={false}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        }} placement=\"right\">\r\n                            <NavLink key={element.id} to={`/dashboard/${element.id}`}>\r\n                                <div key={element.id} className={style.dashboard}\r\n\r\n                                >\r\n                                    <div className={style.title}>\r\n                                        {element.name}\r\n                                    </div>\r\n                                    <div className={style.content} >\r\n                                        <>\r\n                                            {console.log({ element })\r\n                                            }\r\n                                        </>\r\n                                        {\r\n                                            element?.elements && element?.elements?.map((module: any, key) => {\r\n                                                return (\r\n                                                    <div key={key}>\r\n\r\n                                                        <Tag style={{ fontSize: 10 }} color=\"purple\">{module?.split(/(?=[A-Z])/).join(\" \")}</Tag>\r\n                                                    </div>\r\n                                                )\r\n                                            })}\r\n                                        {!element?.elements\r\n                                            && <div className={style.module}>\r\n                                                No Modules\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </NavLink>\r\n                        </Tooltip>\r\n                    )\r\n\r\n                })\r\n                }\r\n            </div>\r\n\r\n            <FloatButton onClick={() => setDrawerOpen(true)} icon={<PlusOutlined className={style.add} />} className={style.addContainer} />\r\n            <Drawer title=\"Create New Dashboard\" placement=\"right\" onClose={() => setDrawerOpen(false)} open={drawerOpen}>\r\n                {/* simple antd form with name and create button */}\r\n                <Form\r\n                    name=\"basic\"\r\n                    labelCol={{ span: 8 }}\r\n                    wrapperCol={{ span: 16 }}\r\n                    style={{ maxWidth: 600 }}\r\n                    initialValues={{ remember: true }}\r\n                    layout='vertical'\r\n                    onFinish={onFinish}\r\n                    // onFinishFailed={onFinishFailed}\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Form.Item\r\n                        label={<>Dashboard&nbsp;Name:</>}\r\n                        name=\"name\"\r\n                    // rules={[{ required: true, message: 'Please input your username!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    {/* <Form.Item\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: 'Please input your password!' }]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item> */}\r\n\r\n                    {/* <Form.Item\r\n                        name=\"remember\"\r\n                        valuePropName=\"checked\"\r\n                        wrapperCol={{ offset: 8, span: 16 }}\r\n                    >\r\n                        <Checkbox>Remember me</Checkbox>\r\n                    </Form.Item> */}\r\n\r\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={pendingCreate}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\pages\\Index.tsx",["92","93","94","95","96","97","98","99","100","101"],[],"import { MinusOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { Dropdown, Empty, Menu, MenuProps, Spin } from \"antd\";\r\nimport { ItemType } from \"antd/es/menu/hooks/useItems\";\r\nimport pLimit from \"p-limit\"\r\nimport { createRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useScreenshot } from \"use-screenshot-react-hook\";\r\n\r\nimport { resetOpenTickets, resetResponseTimes, RootState, setClosedTickets, setClosedTicketsLoading, setOpenTickets, setOpenTicketsLoading, setResponseTimes, setResponseTimesLoading, useAppDispatch, useAppSelector } from \"../@stores/MyStore\"\r\nimport style from \"../@styles/index.module.scss\"\r\nimport { IDashboard } from \"../@types/dashboard\";\r\nimport { Tmodule } from \"../@types/module\";\r\nimport { ISelectedDates } from \"../@types/stores\"\r\nimport { State } from \"../@types/storeState\"\r\nimport { Masonry } from \"../compoments/Grid\";\r\nimport { Modules } from \"../compoments/modules\";\r\nimport Header from \"../compoments/Header\";\r\n\r\nconst Index = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [selectedWidgets, setSelectedWidgets] = useState<IDashboard['elements']>([]);\r\n    const useSelectedDates = useAppSelector((state: RootState) => state.selectedDates as State<ISelectedDates>)\r\n    const dispatch = useAppDispatch();\r\n    const { dashboardId } = useParams<{ dashboardId: string }>()\r\n    const [updateWidths, setUpdateWidths] = useState(0)\r\n    const { image, takeScreenShot } = useScreenshot({\r\n        // we only want small images\r\n        quality: 0.1,\r\n        // we want pngs\r\n        type: 'image/png',\r\n        // size of the image\r\n    })\r\n    const ref = useRef(null)\r\n\r\n\r\n    const updateSelections = (data: IDashboard['elements']) => {\r\n        if (typeof data !== 'object') {\r\n            throw new Error('data is not an object')\r\n        }\r\n        ref.current && takeScreenShot(ref.current)\r\n        fetch(`http://freescout.example.com/responses/api/dashboards/${dashboardId}/update`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content') as string,\r\n            },\r\n            body: JSON.stringify({\r\n                elements: data\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n            .finally(() => {\r\n            });\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (!dashboardId) {\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n        fetch('http://freescout.example.com/responses/api/dashboards/' + dashboardId, {\r\n            method: 'GET',\r\n            signal: signal,\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setSelectedWidgets(JSON.parse(data.elements))\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false)\r\n            });\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [dashboardId])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const urlParams = new URLSearchParams({\r\n            start: useSelectedDates.data.startDate.toString(),\r\n            end: useSelectedDates.data.endDate.toString(),\r\n            getPages: '1'\r\n        })\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n        dispatch(setResponseTimesLoading(true))\r\n        dispatch(resetResponseTimes())\r\n        fetch('http://freescout.example.com/responses/api/response_times' + '?' + urlParams.toString(), {\r\n            method: 'GET',\r\n            signal: signal,\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const pages = data.total_pages\r\n                //http://freescout.example.com/responses/api/response_times\r\n                // run with p-limit\r\n                const limit = 5;\r\n                const limit2 = pLimit(limit);\r\n\r\n                const fetchResponseTimes = async (page: number) => {\r\n\r\n                    const urlParams = new URLSearchParams({\r\n                        page: page.toString(),\r\n                        start: useSelectedDates.data.startDate.toString(),\r\n                        end: useSelectedDates.data.endDate.toString(),\r\n                    })\r\n                    const response = await fetch('http://freescout.example.com/responses/api/response_times' + '?' + urlParams.toString(), {\r\n                        method: 'GET',\r\n                        signal: signal,\r\n                    })\r\n                    const data = await response.json()\r\n                    dispatch(setResponseTimes(data.data))\r\n                }\r\n\r\n                const urls = Array.from(Array(pages).keys())\r\n                const input = urls.map((url) => limit2(() => fetchResponseTimes(url + 1)))\r\n                Promise.all(input).then(() => {\r\n                    dispatch(setResponseTimesLoading(false))\r\n                })\r\n\r\n            })\r\n\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [useSelectedDates.data.startDate, useSelectedDates.data.endDate, dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        const urlParams = new URLSearchParams({\r\n            end: useSelectedDates.data.endDate.toString(),\r\n            getPages: '1'\r\n        })\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n        dispatch(setOpenTicketsLoading(true))\r\n        dispatch(resetOpenTickets())\r\n        fetch('http://freescout.example.com/responses/api/outstanding_resposes' + '?' + urlParams.toString(), {\r\n            method: 'GET',\r\n            signal: signal,\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const pages = data.total_pages\r\n                //http://freescout.example.com/responses/api/response_times\r\n                // run with p-limit\r\n                const limit = 5;\r\n                const limit2 = pLimit(limit);\r\n\r\n                const fetchResponseTimes = async (page: number) => {\r\n\r\n                    const urlParams = new URLSearchParams({\r\n                        page: page.toString(),\r\n                        end: useSelectedDates.data.endDate.toString(),\r\n                    })\r\n                    const response = await fetch('http://freescout.example.com/responses/api/outstanding_resposes' + '?' + urlParams.toString(), {\r\n                        method: 'GET',\r\n                        signal: signal,\r\n                    })\r\n                    const data = await response.json()\r\n                    dispatch(setOpenTickets(data))\r\n                }\r\n\r\n                const urls = Array.from(Array(pages).keys())\r\n                const input = urls.map((url) => limit2(() => fetchResponseTimes(url + 1)))\r\n                Promise.all(input).then(() => {\r\n                    dispatch(setOpenTicketsLoading(false))\r\n                })\r\n\r\n            })\r\n\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [useSelectedDates.data.startDate, useSelectedDates.data.endDate, dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(setClosedTicketsLoading(true))\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n        fetch('http://freescout.example.com/responses/api/closed_responses', {\r\n            method: 'GET',\r\n            signal: signal,\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                dispatch(setClosedTicketsLoading(false))\r\n                dispatch(setClosedTickets(data))\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [dispatch])\r\n\r\n    const widths: { [key: number]: number } = {\r\n        500: 1,\r\n        750: 30,\r\n        1000: 50,\r\n        1250: 60,\r\n        1500: 70,\r\n        1750: 90,\r\n        2000: 90,\r\n        2250: 100,\r\n        2500: 110,\r\n        2750: 120,\r\n        3000: 130,\r\n        3250: 140,\r\n        3500: 150,\r\n        3750: 160,\r\n        4000: 170,\r\n        4250: 180,\r\n        4500: 190,\r\n\r\n\r\n    }\r\n\r\n    const columns = useMemo(() => {\r\n        let min = 0\r\n        for (const [value, i] of Object.entries(widths)) {\r\n            let max: number = parseInt(value)\r\n            if (window.innerWidth >= min && window.innerWidth < max) {\r\n                return widths[min]\r\n            }\r\n            min = max\r\n\r\n        }\r\n\r\n        return widths[min]\r\n    }, [widths, updateWidths])\r\n\r\n    // add a resize listener\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n\r\n            setUpdateWidths((uw) => uw + 1)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize)\r\n        }\r\n    }, [])\r\n\r\n    const modulesToRender: Tmodule[] = useMemo(() => {\r\n        return Modules.filter((module) => {\r\n            return selectedWidgets.includes(module.id)\r\n        })\r\n    }, [selectedWidgets])\r\n\r\n    const items = useMemo<MenuProps['items']>(() => {\r\n        const modules = Modules\r\n            .filter((module) => {\r\n                return !selectedWidgets.includes(module.id)\r\n            })\r\n            .map((module, key) => {\r\n                return {\r\n                    label: module.id,\r\n                    key: key,\r\n                    onClick: () => {\r\n                        setSelectedWidgets((sw) => [...sw, module.id])\r\n                        updateSelections([...selectedWidgets, module.id])\r\n\r\n                    }\r\n                }\r\n            })\r\n\r\n        const remove = Modules\r\n            .filter((module) => {\r\n                return selectedWidgets.includes(module.id)\r\n            })\r\n            .map((module, key) => {\r\n                return {\r\n                    label: module.id,\r\n                    key: key,\r\n                    onClick: () => {\r\n                        setSelectedWidgets((sw) => sw.filter((s) => s !== module.id))\r\n                        updateSelections(selectedWidgets.filter((s) => s !== module.id))\r\n                    }\r\n                }\r\n            })\r\n\r\n\r\n        return [{\r\n            label: 'Add Element',\r\n            key: 'add',\r\n            icon: <PlusOutlined />,\r\n            children: modules\r\n        }, {\r\n            label: 'Remove Element',\r\n            key: 'remove',\r\n            icon: <MinusOutlined />,\r\n            children: remove\r\n        }]\r\n    }, [Modules, setSelectedWidgets, selectedWidgets, updateSelections])\r\n\r\n    useEffect(() => {\r\n        console.log(columns)\r\n    }, [columns])\r\n\r\n    useEffect(() => {\r\n\r\n        // if image is not null, then open a new window with the image as blob\r\n        console.log({ image })\r\n        if (image) {\r\n            // send to update\r\n            fetch(`http://freescout.example.com/responses/api/dashboards/${dashboardId}/update`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content') as string,\r\n                },\r\n                body: JSON.stringify({\r\n                    image: image\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                }\r\n                )\r\n                .catch((error) => {\r\n                    console.error('Error:', error);\r\n                })\r\n                .finally(() => {\r\n                })\r\n        }\r\n\r\n    }, [image])\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Menu mode=\"horizontal\" items={items} style={{ width: 300, float: 'left', marginTop: -30 }} />\r\n\r\n            <div className={style.main} ref={ref}>\r\n                {loading && <Spin />}\r\n                {!modulesToRender.length && !loading && <Empty style={{margin: '30 auto'}} description={'No Modules Selected'}/>}\r\n                {!loading && <Masonry columns={columns} items={\r\n                    modulesToRender.map((module: Tmodule) => {\r\n                        // wrap the module.item in a div with the correct size\r\n                        return {\r\n                            ...module,\r\n                            item: (\r\n                                <span style={columns === 30 ? {\r\n                                    width: '100%'\r\n                                } : {}}\r\n                                >\r\n                                    {module.item}\r\n                                </span>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                    style={\r\n                        columns <= 30 ? {\r\n                            margin: '0 auto'\r\n                        } : {}\r\n                    }\r\n                />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index","C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\Grid.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\compoments\\modules.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\responseTimes.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\lastClosures.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\responseTimesOverTime.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\openTicketsBreakdown.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\pendingTicketsBreakdown.tsx",[],[],"C:\\Users\\matfr\\OneDrive\\Documents\\docker-freescout\\test\\data\\Modules\\ReportsModule\\Resources\\myapp\\src\\modules\\openTicketOverview.tsx",[],[],{"ruleId":"102","severity":1,"message":"103","line":25,"column":7,"nodeType":"104","messageId":"105","endLine":25,"endColumn":16},{"ruleId":"106","severity":2,"message":"107","line":3,"column":8,"nodeType":"104","messageId":"108","endLine":3,"endColumn":14},{"ruleId":"109","severity":2,"message":"110","line":8,"column":5,"nodeType":"111","messageId":"112","endLine":8,"endColumn":53},{"ruleId":"113","severity":2,"message":"114","line":10,"column":26,"nodeType":"115","messageId":"116","endLine":10,"endColumn":29,"suggestions":"117"},{"ruleId":"106","severity":2,"message":"118","line":2,"column":10,"nodeType":"104","messageId":"108","endLine":2,"endColumn":26},{"ruleId":"113","severity":2,"message":"114","line":43,"column":31,"nodeType":"115","messageId":"116","endLine":43,"endColumn":34,"suggestions":"119"},{"ruleId":"106","severity":2,"message":"120","line":58,"column":19,"nodeType":"104","messageId":"108","endLine":58,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":86,"column":8,"nodeType":"123","endLine":86,"endColumn":21,"suggestions":"124"},{"ruleId":"113","severity":2,"message":"114","line":143,"column":98,"nodeType":"115","messageId":"116","endLine":143,"endColumn":101,"suggestions":"125"},{"ruleId":"106","severity":2,"message":"126","line":2,"column":10,"nodeType":"104","messageId":"108","endLine":2,"endColumn":18},{"ruleId":"106","severity":2,"message":"127","line":3,"column":10,"nodeType":"104","messageId":"108","endLine":3,"endColumn":18},{"ruleId":"106","severity":2,"message":"128","line":5,"column":10,"nodeType":"104","messageId":"108","endLine":5,"endColumn":19},{"ruleId":"106","severity":2,"message":"129","line":5,"column":21,"nodeType":"104","messageId":"108","endLine":5,"endColumn":32},{"ruleId":"106","severity":2,"message":"130","line":6,"column":10,"nodeType":"104","messageId":"108","endLine":6,"endColumn":23},{"ruleId":"106","severity":2,"message":"131","line":238,"column":28,"nodeType":"104","messageId":"108","endLine":238,"endColumn":29},{"ruleId":"132","severity":2,"message":"133","line":239,"column":17,"nodeType":"104","messageId":"134","endLine":239,"endColumn":28,"fix":"135"},{"ruleId":"121","severity":1,"message":"136","line":248,"column":8,"nodeType":"123","endLine":248,"endColumn":30,"suggestions":"137"},{"ruleId":"121","severity":1,"message":"138","line":312,"column":8,"nodeType":"123","endLine":312,"endColumn":72,"suggestions":"139"},{"ruleId":"121","severity":1,"message":"140","line":347,"column":8,"nodeType":"123","endLine":347,"endColumn":15,"suggestions":"141"},"react-refresh/only-export-components","Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","Identifier","localComponents","@typescript-eslint/no-unused-vars","'Header' is defined but never used.","unusedVar","@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["142","143"],"'containerClasses' is defined but never used.",["144","145"],"'data' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has an unnecessary dependency: 'needsUpdate'. Either exclude it or remove the dependency array.","ArrayExpression",["146"],["147","148"],"'Dropdown' is defined but never used.","'ItemType' is defined but never used.","'createRef' is defined but never used.","'useCallback' is defined but never used.","'useMediaQuery' is defined but never used.","'i' is assigned a value but never used.","prefer-const","'max' is never reassigned. Use 'const' instead.","useConst",{"range":"149","text":"150"},"React Hook useMemo has an unnecessary dependency: 'updateWidths'. Either exclude it or remove the dependency array.",["151"],"React Hook useMemo has an unnecessary dependency: 'Modules'. Either exclude it or remove the dependency array. Outer scope values like 'Modules' aren't valid dependencies because mutating them doesn't re-render the component.",["152"],"React Hook useEffect has a missing dependency: 'dashboardId'. Either include it or remove the dependency array.",["153"],{"messageId":"154","fix":"155","desc":"156"},{"messageId":"157","fix":"158","desc":"159"},{"messageId":"154","fix":"160","desc":"156"},{"messageId":"157","fix":"161","desc":"159"},{"desc":"162","fix":"163"},{"messageId":"154","fix":"164","desc":"156"},{"messageId":"157","fix":"165","desc":"159"},[8824,8857],"const max: number = parseInt(value)",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"suggestUnknown",{"range":"172","text":"173"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"174","text":"175"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"176","text":"173"},{"range":"177","text":"175"},"Update the dependencies array to be: []",{"range":"178","text":"179"},{"range":"180","text":"173"},{"range":"181","text":"175"},"Update the dependencies array to be: [widths]",{"range":"182","text":"183"},"Update the dependencies array to be: [setSelectedWidgets, selectedWidgets, updateSelections]",{"range":"184","text":"185"},"Update the dependencies array to be: [dashboardId, image]",{"range":"186","text":"187"},[325,328],"unknown",[325,328],"never",[1613,1616],[1613,1616],[3065,3078],"[]",[5886,5889],[5886,5889],[9055,9077],"[widths]",[11046,11110],"[setSelectedWidgets, selectedWidgets, updateSelections]",[12216,12223],"[dashboardId, image]"]